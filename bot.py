import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from aiogram.dispatcher.filters import Text

API_TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHANNEL = int(os.getenv("TARGET_CHANNEL"))
ADMINS = [int(uid) for uid in os.getenv("ADMINS", "").split(",") if uid]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ‚ú® –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ö—ç—à—Ç–µ–≥
def clean_signature(text: str) -> str:
    lines = text.strip().split('\n')
    if len(lines) < 2:
        return text

    last = lines[-1].strip()
    if any(x in last for x in ['http', 't.me/', '@', '#']):
        return '\n'.join(lines[:-1])
    return text

# üìå –ö–Ω–æ–ø–∫–∏
def get_manual_keyboard(message_id):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data=f"post_manual:{message_id}"),
        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_manual:{message_id}")
    )
    return kb

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
media_groups = {}

# üì© –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telethon
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_telethon_message(msg: types.Message):
    print(f"‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text or msg.caption}")
    kb = get_manual_keyboard(msg.message_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤
    if msg.media_group_id:
        group = media_groups.setdefault(msg.media_group_id, [])
        group.append(msg)

        await asyncio.sleep(1.0)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ —Å–æ–±–µ—Ä—É—Ç—Å—è –≤—Å–µ —á–∞—Å—Ç–∏
        if len(group) > 1:
            media = []
            for m in group:
                if m.photo:
                    media.append(InputMediaPhoto(media=m.photo[-1].file_id, caption=m.caption if len(media) == 0 else None))
                elif m.video:
                    media.append(InputMediaVideo(media=m.video.file_id, caption=m.caption if len(media) == 0 else None))
            if media:
                sent = await bot.send_media_group(chat_id=msg.chat.id, media=media)
                await bot.send_message(chat_id=msg.chat.id, text="–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–ª—å–±–æ–º–∞:", reply_markup=kb, reply_to_message_id=sent[0].message_id)
            media_groups.pop(msg.media_group_id, None)
        return

    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if msg.photo:
        await bot.send_photo(chat_id=msg.chat.id, photo=msg.photo[-1].file_id, caption=msg.caption, reply_markup=kb)
    elif msg.video:
        await bot.send_video(chat_id=msg.chat.id, video=msg.video.file_id, caption=msg.caption, reply_markup=kb)
    elif msg.document:
        await bot.send_document(chat_id=msg.chat.id, document=msg.document.file_id, caption=msg.caption, reply_markup=kb)
    elif msg.text:
        await bot.send_message(chat_id=msg.chat.id, text=msg.text, reply_markup=kb)
    else:
        await msg.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")

# ‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è
@dp.callback_query_handler(Text(startswith="post_manual"))
async def post_message(callback: types.CallbackQuery):
    msg_id = int(callback.data.split(":")[1])

    try:
        original = callback.message.reply_to_message
        content = original.text or original.caption
        clean = clean_signature(content) if content else None

        if clean:
            await bot.send_message(chat_id=TARGET_CHANNEL, text=clean)
        elif original.content_type == "photo":
            await bot.send_photo(TARGET_CHANNEL, original.photo[-1].file_id, caption=original.caption)
        elif original.content_type == "video":
            await bot.send_video(TARGET_CHANNEL, original.video.file_id, caption=original.caption)
        elif original.content_type == "document":
            await bot.send_document(TARGET_CHANNEL, original.document.file_id, caption=original.caption)
        else:
            await original.copy_to(TARGET_CHANNEL)

        await callback.message.edit_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")

    await callback.answer()

# ‚ùå –ü—Ä–æ–ø—É—Å–∫
@dp.callback_query_handler(Text(startswith="skip_manual"))
async def skip_post(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await callback.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
